
    const renderFn = new Function("const { createElementVNode: _createElementVNode, resolveComponent: _resolveComponent, createVNode: _createVNode, createTextVNode: _createTextVNode, withCtx: _withCtx, Fragment: _Fragment, openBlock: _openBlock, createElementBlock: _createElementBlock } = Vue\n\nconst _hoisted_1 = { sticky: \"\" }\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"a\", {\n  href: \"/tp/index.html\",\n  title: \"Home\",\n  class: \"navbar-brand\"\n}, \"AssetSphere\", -1 /* HOISTED */)\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"/tp/index.html\",\n    class: \"nav-link\"\n  }, \"Home\")\n], -1 /* HOISTED */)\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"/tp/UserGuide.html\",\n    class: \"nav-link\"\n  }, \"User Guide\")\n], -1 /* HOISTED */)\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"/tp/DeveloperGuide.html\",\n    class: \"nav-link\"\n  }, \"Developer Guide\")\n], -1 /* HOISTED */)\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"/tp/AboutUs.html\",\n    class: \"nav-link\"\n  }, \"About Us\")\n], -1 /* HOISTED */)\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"a\", {\n    href: \"https://github.com/AY2526S1-CS2103T-T13-2/tp\",\n    target: \"_blank\",\n    class: \"nav-link\"\n  }, [\n    /*#__PURE__*/_createElementVNode(\"span\", null, [\n      /*#__PURE__*/_createElementVNode(\"span\", {\n        \"aria-hidden\": \"true\",\n        class: \"fab fa-github\"\n      })\n    ])\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_8 = { class: \"navbar-form\" }\nconst _hoisted_9 = { id: \"flex-body\" }\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"div\", { class: \"site-nav-top\" }, [\n  /*#__PURE__*/_createElementVNode(\"div\", {\n    class: \"fw-bold mb-2\",\n    style: {\"font-size\":\"1.25rem\"}\n  }, \"Site Map\")\n], -1 /* HOISTED */)\nconst _hoisted_11 = { class: \"nav-component slim-scroll\" }\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"div\", {\n    class: \"site-nav-default-list-item site-nav-list-item-0\",\n    onclick: \"handleSiteNavClick(this)\"\n  }, [\n    /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/index.html\" }, \"Home\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"div\", {\n    class: \"site-nav-default-list-item site-nav-list-item-0\",\n    onclick: \"handleSiteNavClick(this)\"\n  }, [\n    /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/UserGuide.html\" }, \"User Guide\"),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"div\", { class: \"site-nav-dropdown-btn-container\" }, [\n      /*#__PURE__*/_createElementVNode(\"i\", {\n        class: \"site-nav-dropdown-btn-icon site-nav-rotate-icon\",\n        onclick: \"handleSiteNavClick(this.parentNode.parentNode, false); event.stopPropagation();\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"span\", {\n          class: \"glyphicon glyphicon-menu-down\",\n          \"aria-hidden\": \"true\"\n        })\n      ])\n    ])\n  ]),\n  /*#__PURE__*/_createElementVNode(\"ul\", { class: \"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list\" }, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"div\", {\n        class: \"site-nav-default-list-item site-nav-list-item-1\",\n        onclick: \"handleSiteNavClick(this)\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/UserGuide.html#quick-start\" }, \"Quick Start\")\n      ])\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"div\", {\n        class: \"site-nav-default-list-item site-nav-list-item-1\",\n        onclick: \"handleSiteNavClick(this)\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/UserGuide.html#features\" }, \"Features\")\n      ])\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"div\", {\n        class: \"site-nav-default-list-item site-nav-list-item-1\",\n        onclick: \"handleSiteNavClick(this)\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/UserGuide.html#faq\" }, \"FAQ\")\n      ])\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"div\", {\n        class: \"site-nav-default-list-item site-nav-list-item-1\",\n        onclick: \"handleSiteNavClick(this)\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/UserGuide.html#faq\" }, \"Command Summary\")\n      ])\n    ])\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"div\", {\n    class: \"site-nav-default-list-item site-nav-list-item-0\",\n    onclick: \"handleSiteNavClick(this)\"\n  }, [\n    /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/DeveloperGuide.html\" }, \"Developer Guide\"),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"div\", { class: \"site-nav-dropdown-btn-container\" }, [\n      /*#__PURE__*/_createElementVNode(\"i\", {\n        class: \"site-nav-dropdown-btn-icon site-nav-rotate-icon\",\n        onclick: \"handleSiteNavClick(this.parentNode.parentNode, false); event.stopPropagation();\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"span\", {\n          class: \"glyphicon glyphicon-menu-down\",\n          \"aria-hidden\": \"true\"\n        })\n      ])\n    ])\n  ]),\n  /*#__PURE__*/_createElementVNode(\"ul\", { class: \"site-nav-dropdown-container site-nav-dropdown-container-open site-nav-list\" }, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"div\", {\n        class: \"site-nav-default-list-item site-nav-list-item-1\",\n        onclick: \"handleSiteNavClick(this)\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/DeveloperGuide.html#acknowledgements\" }, \"Acknowledgements\")\n      ])\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"div\", {\n        class: \"site-nav-default-list-item site-nav-list-item-1\",\n        onclick: \"handleSiteNavClick(this)\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/DeveloperGuide.html#setting-up-getting-started\" }, \"Setting Up\")\n      ])\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"div\", {\n        class: \"site-nav-default-list-item site-nav-list-item-1\",\n        onclick: \"handleSiteNavClick(this)\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/DeveloperGuide.html#design\" }, \"Design\")\n      ])\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"div\", {\n        class: \"site-nav-default-list-item site-nav-list-item-1\",\n        onclick: \"handleSiteNavClick(this)\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/DeveloperGuide.html#implementation\" }, \"Implementation\")\n      ])\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"div\", {\n        class: \"site-nav-default-list-item site-nav-list-item-1\",\n        onclick: \"handleSiteNavClick(this)\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/DeveloperGuide.html#documentation-logging-testing-configuration-dev-ops\" }, \"Documentation, logging, testing, configuration, dev-ops\")\n      ])\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"div\", {\n        class: \"site-nav-default-list-item site-nav-list-item-1\",\n        onclick: \"handleSiteNavClick(this)\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/DeveloperGuide.html#appendix-requirements\" }, \"Appendix: Requirements\")\n      ])\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"div\", {\n        class: \"site-nav-default-list-item site-nav-list-item-1\",\n        onclick: \"handleSiteNavClick(this)\"\n      }, [\n        /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/DeveloperGuide.html#appendix-instructions-for-manual-testing\" }, \"Appendix: Instructions for manual testing\")\n      ])\n    ])\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_15 = /*#__PURE__*/_createElementVNode(\"li\", null, [\n  /*#__PURE__*/_createElementVNode(\"div\", {\n    class: \"site-nav-default-list-item site-nav-list-item-0\",\n    onclick: \"handleSiteNavClick(this)\"\n  }, [\n    /*#__PURE__*/_createElementVNode(\"a\", { href: \"/tp/AboutUs.html\" }, \"About Us\")\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"div\", { id: \"content-wrapper\" }, [\n  /*#__PURE__*/_createElementVNode(\"h1\", { id: \"command-assembly\" }, [\n    /*#__PURE__*/_createTextVNode(\"Command Assembly\"),\n    /*#__PURE__*/_createElementVNode(\"a\", {\n      class: \"fa fa-anchor\",\n      href: \"#command-assembly\",\n      onclick: \"event.stopPropagation()\"\n    })\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"This subguide details the full command assembly strategy used by AssetSphere.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"h3\", { id: \"lexer-architecture\" }, [\n    /*#__PURE__*/_createTextVNode(\"Lexer Architecture\"),\n    /*#__PURE__*/_createElementVNode(\"a\", {\n      class: \"fa fa-anchor\",\n      href: \"#lexer-architecture\",\n      onclick: \"event.stopPropagation()\"\n    })\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"CommandLexer\"),\n    /*#__PURE__*/_createTextVNode(\" is implemented a single finite state machine. It ingests an input string, and scans characters sequentially. At any point, it maintains a window representing the current token it is scanning.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The lexer operates through a single forward pass over the input string, maintaining two position indices:\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ul\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, \"start: Marks the beginning of the current lexeme being scanned\"),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, \"current: Marks the position of the next character to examine\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Core Methods\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"peek()\"),\n    /*#__PURE__*/_createTextVNode(\": Returns the character at the current position without advancing. This allows the lexer to examine what's ahead before committing to a state transition.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"advance()\"),\n    /*#__PURE__*/_createTextVNode(\": Returns the character at current and increments the position by one. This consumes the character and moves the lexer forward in the input stream.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"munch\"),\n    /*#__PURE__*/_createTextVNode(\": A family of methods (munchWord(), munchText()) that consume multiple consecutive characters matching a specific pattern. \\\"Munching\\\" refers to the greedy consumption of characters: the lexer keeps calling advance() as long as characters match the expected pattern, maximizing the length of each token.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Usage\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The lexer is accessed through the static factory method:\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"pre\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs java\" }, [\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"TokenisedCommand result = CommandLexer.lexCommand(inputString);\\n\")\n    ])\n  ]),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"This returns a TokenisedCommand object containing the original input and the complete token sequence, ready for parsing.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Theoretical Foundation\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The lexer is a lexical analyzer that tokenizes command strings according to a simple regular grammar. It transforms raw input strings into a sequence of tokens that can be used by a parser downstream.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"This lexer implements a single finite state machine (FSM) that recognizes a Level 3 regular grammar. The grammar defines five token types: \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"WORD\"),\n    /*#__PURE__*/_createTextVNode(\", \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"TEXT\"),\n    /*#__PURE__*/_createTextVNode(\", \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"SLASH\"),\n    /*#__PURE__*/_createTextVNode(\", \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"COLON\"),\n    /*#__PURE__*/_createTextVNode(\", and \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"TERMINAL\"),\n    /*#__PURE__*/_createTextVNode(\".\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"As a finite state machine, the lexer maintains a current state (represented by its position in the input) and transitions between states based on the characters it encounters. The FSM operates deterministically: for any given character, the lexer knows exactly which state to transition to and which token type to emit.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The regular nature of the grammar means the lexer requires no lookahead beyond a single character and no backtracking, making it efficient and straightforward to implement.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"h3\", { id: \"parser-architecture\" }, [\n    /*#__PURE__*/_createTextVNode(\"Parser Architecture\"),\n    /*#__PURE__*/_createElementVNode(\"a\", {\n      class: \"fa fa-anchor\",\n      href: \"#parser-architecture\",\n      onclick: \"event.stopPropagation()\"\n    })\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"CommandParser\"),\n    /*#__PURE__*/_createTextVNode(\" is an recursive descent parser that transforms a stream of tokens produced by the \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"CommandLexer\"),\n    /*#__PURE__*/_createTextVNode(\" into an abstract syntax tree (AST). Each nonterminal (defined in the grammar by production rules of the form \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"A → α\"),\n    /*#__PURE__*/_createTextVNode(\") in the grammar corresponds to a parsing method. These methods call each other recursively, mirroring the grammar's hierarchical structure.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Core Methods\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"peek()\"),\n    /*#__PURE__*/_createTextVNode(\": Returns the token at the current position without advancing. This provides the one-token lookahead that characterizes LL(1) parsing, allowing the parser to decide which production rule to apply.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"advance()\"),\n    /*#__PURE__*/_createTextVNode(\": Returns the current token and increments the position by one. This consumes the token and moves the parser forward in the token stream.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"eat(TokenType... types)\"),\n    /*#__PURE__*/_createTextVNode(\": The fundamental consuming operation that combines checking and advancing. It verifies that the current token matches one of the expected types, then consumes it via advance(). If the token doesn't match, it throws an exception. This method enforces the grammar rules at each step.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"check(TokenType... types)\"),\n    /*#__PURE__*/_createTextVNode(\": A non-consuming lookahead operation that returns true if the current token matches any of the specified types. This is used in decision points to determine which production to apply or whether to continue looping.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Error Handling and Recovery\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The parser uses exception-based error propagation:\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ul\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"ProductionApplicationException\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\": Thrown when \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"eat()\"),\n      /*#__PURE__*/_createTextVNode(\" encounters an unexpected token. The exception carries a \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"ParserError\"),\n      /*#__PURE__*/_createTextVNode(\" containing:\\n\"),\n      /*#__PURE__*/_createElementVNode(\"ul\", null, [\n        /*#__PURE__*/_createElementVNode(\"li\", null, \"The original input string\"),\n        /*#__PURE__*/_createTextVNode(),\n        /*#__PURE__*/_createElementVNode(\"li\", null, \"The offending token\"),\n        /*#__PURE__*/_createTextVNode(),\n        /*#__PURE__*/_createElementVNode(\"li\", null, \"The expected token types\")\n      ])\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"Error Enrichment\"),\n      /*#__PURE__*/_createTextVNode(\": As exceptions propagate up the call stack, each parsing method catches them, adds its non-terminal name to the error (building a derivation trace), and re-throws. This creates a complete picture of which production rule failed and where in the grammar hierarchy the error occurred.\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"ParserException\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\": The final exception type thrown to the caller, wrapping the enriched parser error with full diagnostic information.\")\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Usage\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The parser is accessed through the static factory method:\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"pre\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs java\" }, [\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"AstNode.Command ast = CommandParser.parseCommand(tokenisedCommand);\\n\")\n    ])\n  ]),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"This returns the root of the AST, which can then be traversed for semantic analysis, validation, and execution.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Theoretical Foundation\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"This parser implements an LL(1) parsing strategy, where:\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ul\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"em\", null, \"LL\"),\n      /*#__PURE__*/_createTextVNode(\" stands for \\\"Left-to-right, Leftmost derivation\\\"\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"em\", null, \"(1)\"),\n      /*#__PURE__*/_createTextVNode(\" indicates one token of lookahead\")\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The parser recognises a Level 2 context-free grammar that defines the hierarchical structure of commands. Unlike the lexer's regular grammar, this context-free grammar can express nested and recursive structures, making it more powerful and suitable for parsing syntactic constructs.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"All production rules in a context-free grammar are of the form: \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"A → α\"),\n    /*#__PURE__*/_createTextVNode(\".\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The LL(1) property means the parser can determine which production rule to apply by examining only the current token, without backtracking. This is possible because the grammar is carefully designed so that each production has a distinct FIRST set (tokens that can begin that production) and FOLLOW set (tokens that can legally appear after that production).\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"h3\", { id: \"ast-processing\" }, [\n    /*#__PURE__*/_createTextVNode(\"AST Processing\"),\n    /*#__PURE__*/_createElementVNode(\"a\", {\n      class: \"fa fa-anchor\",\n      href: \"#ast-processing\",\n      onclick: \"event.stopPropagation()\"\n    })\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Overview\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"AstVisitor<R>\"),\n    /*#__PURE__*/_createTextVNode(\" interface defines the contract for implementing the \"),\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Visitor pattern\"),\n    /*#__PURE__*/_createTextVNode(\" on command Abstract Syntax Trees. It enables traversal and processing of AST nodes without modifying the node classes themselves, providing a clean separation between the tree structure and the operations performed on it.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"This interface is generic over the return type produced by visiting each node. This generic parameter provides flexibility for different visitor use cases.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Visitor Pattern\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The Visitor pattern solves a common problem in compiler design: how to perform different operations on an AST (extraction, validation, transformation, optimization) without cluttering the node classes with operation-specific code.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"This interface declares one \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"visit\"),\n    /*#__PURE__*/_createTextVNode(\" method for each AST node type in the command grammar. When a visitor traverses the tree, each node calls the appropriate \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"visit\"),\n    /*#__PURE__*/_createTextVNode(\" method on the visitor, passing itself as an argument. This technique, called \"),\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"double dispatch\"),\n    /*#__PURE__*/_createTextVNode(\", allows the visitor to execute type-specific logic for each node.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Visitor Methods\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"Each method corresponds to one AST node type and follows the naming convention \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"visit[NodeType]\"),\n    /*#__PURE__*/_createTextVNode(\":\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ul\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"visitCommand\"),\n      /*#__PURE__*/_createTextVNode(\": Processes the root command structure (imperative + parameters + options)\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"visitImperative\"),\n      /*#__PURE__*/_createTextVNode(\": Processes the command verb\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"visitParameterList\"),\n      /*#__PURE__*/_createTextVNode(\" / \"),\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"visitParameter\"),\n      /*#__PURE__*/_createTextVNode(\": Processes positional arguments\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"visitOptionList\"),\n      /*#__PURE__*/_createTextVNode(\" / \"),\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"visitOption\"),\n      /*#__PURE__*/_createTextVNode(\": Processes named options\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"visitOptionName\"),\n      /*#__PURE__*/_createTextVNode(\" / \"),\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"visitOptionValue\"),\n      /*#__PURE__*/_createTextVNode(\": Processes option components\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"visitText\"),\n      /*#__PURE__*/_createTextVNode(\" / \"),\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"visitWord\"),\n      /*#__PURE__*/_createTextVNode(\": Processes terminal (leaf) nodes containing actual token data\")\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The complete set of methods ensures visitors can handle every node type in the grammar, providing exhaustive coverage of the AST structure.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Implementing Custom Visitors\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"To create a custom AST processor, implement the \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"AstVisitor<R>\"),\n    /*#__PURE__*/_createTextVNode(\" interface with your desired return type:\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"pre\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs java\" }, [\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"public\"),\n        /*#__PURE__*/_createTextVNode(),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-class\" }, [\n          /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"class\"),\n          /*#__PURE__*/_createTextVNode(),\n          /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-title\" }, \"MyCustomVisitor\"),\n          /*#__PURE__*/_createTextVNode(),\n          /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"implements\"),\n          /*#__PURE__*/_createTextVNode(),\n          /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-title\" }, \"AstVisitor\"),\n          /*#__PURE__*/_createTextVNode(\"<\"),\n          /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-title\" }, \"MyResultType\"),\n          /*#__PURE__*/_createTextVNode(\"> \")\n        ]),\n        /*#__PURE__*/_createTextVNode(\"{\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"    \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-meta\" }, \"@Override\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"    \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-function\" }, [\n          /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"public\"),\n          /*#__PURE__*/_createTextVNode(\" MyResultType \"),\n          /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-title\" }, \"visitCommand\"),\n          /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-params\" }, \"(AstNode.Command node)\"),\n          /*#__PURE__*/_createTextVNode()\n        ]),\n        /*#__PURE__*/_createTextVNode(\"{\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"        \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// Process command node\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"        \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// Typically calls accept() on child nodes to traverse deeper\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"        MyResultType imperativeResult = node.getImperative().accept(\"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"this\"),\n        /*#__PURE__*/_createTextVNode(\");\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"        MyResultType paramsResult = node.getParameterList().accept(\"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"this\"),\n        /*#__PURE__*/_createTextVNode(\");\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"        MyResultType optionsResult = node.getOptionList().accept(\"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"this\"),\n        /*#__PURE__*/_createTextVNode(\");\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"        \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// Combine results and return\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"        \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"return\"),\n        /*#__PURE__*/_createTextVNode(\" combineResults(imperativeResult, paramsResult, optionsResult);\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"    }\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"    \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-meta\" }, \"@Override\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"    \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-function\" }, [\n          /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"public\"),\n          /*#__PURE__*/_createTextVNode(\" MyResultType \"),\n          /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-title\" }, \"visitWord\"),\n          /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-params\" }, \"(AstNode.Word node)\"),\n          /*#__PURE__*/_createTextVNode()\n        ]),\n        /*#__PURE__*/_createTextVNode(\"{\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"        \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// Process leaf node\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"        \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// Extract token data and convert to result type\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"        String tokenValue = node.getToken().getLiteral();\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"        \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"return\"),\n        /*#__PURE__*/_createTextVNode(\" processWord(tokenValue);\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"    }\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"    \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// Implement remaining visit methods...\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"}\\n\")\n    ])\n  ]),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Traversal Pattern\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"Visitors typically follow a \"),\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"recursive descent\"),\n    /*#__PURE__*/_createTextVNode(\" pattern:\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ol\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"Each \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"visit\"),\n      /*#__PURE__*/_createTextVNode(\" method processes the current node\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"For non-terminal nodes, the visitor calls \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"accept(this)\"),\n      /*#__PURE__*/_createTextVNode(\" on child nodes to continue traversal\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, \"For terminal nodes (Word, Text), the visitor extracts token data directly\"),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, \"Results from child visits are combined to produce the parent's result\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Provided Visitors\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ul\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"Extraction (\"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"CommandExtractor\"),\n      /*#__PURE__*/_createTextVNode(\"): Builds a \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Command\"),\n      /*#__PURE__*/_createTextVNode(\" object by accumulating data as the visitor descends through the tree.\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"Pretty-Printing (\"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"AstPrinter\"),\n      /*#__PURE__*/_createTextVNode(\"): Returns a formatted \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"String\"),\n      /*#__PURE__*/_createTextVNode(\" visualisation of a tree.\")\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"h3\", { id: \"lexer-parser-interface-commands\" }, [\n    /*#__PURE__*/_createTextVNode(\"Lexer/Parser Interface: Commands\"),\n    /*#__PURE__*/_createElementVNode(\"a\", {\n      class: \"fa fa-anchor\",\n      href: \"#lexer-parser-interface-commands\",\n      onclick: \"event.stopPropagation()\"\n    })\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Overview\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"BareCommand\"),\n    /*#__PURE__*/_createTextVNode(\" class is a high-level facade that provides a simple, queryable interface for working with parsed commands. It serves as the primary entry point for users of the lexer/parser package, abstracting away the complexities of tokenisation, parsing, and AST traversal behind a clean, intuitive API.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Design Philosophy\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"This class embodies the \"),\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Facade pattern\"),\n    /*#__PURE__*/_createTextVNode(\", hiding the multi-stage processing pipeline (lexing → parsing → AST extraction) behind a single static factory method. Implementors do not need to understand tokens, ASTs, or visitor patterns, but should just call \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"BareCommand.parse()\"),\n    /*#__PURE__*/_createTextVNode(\" and receive a structured representation of their command string.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"BareCommand\"),\n    /*#__PURE__*/_createTextVNode(\" class represents the \"),\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"semantic model\"),\n    /*#__PURE__*/_createTextVNode(\" of a command, distilled from the syntactic AST into three fundamental components:\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ul\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"Imperative\"),\n      /*#__PURE__*/_createTextVNode(\": The command verb (e.g., \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"add\"),\n      /*#__PURE__*/_createTextVNode(\", \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"delete\"),\n      /*#__PURE__*/_createTextVNode(\", \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"edit\"),\n      /*#__PURE__*/_createTextVNode(\")\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"Parameters\"),\n      /*#__PURE__*/_createTextVNode(\": Ordered positional arguments\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"Options\"),\n      /*#__PURE__*/_createTextVNode(\": Named flags with optional values (e.g., \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"/email:john@example.com\"),\n      /*#__PURE__*/_createTextVNode(\" or \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"/force\"),\n      /*#__PURE__*/_createTextVNode(\")\")\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"h4\", { id: \"architecture\" }, [\n    /*#__PURE__*/_createTextVNode(\"Architecture\"),\n    /*#__PURE__*/_createElementVNode(\"a\", {\n      class: \"fa fa-anchor\",\n      href: \"#architecture\",\n      onclick: \"event.stopPropagation()\"\n    })\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Processing Pipeline\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"parse()\"),\n    /*#__PURE__*/_createTextVNode(\" method orchestrates a three-stage transformation:\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ol\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"p\", null, [\n        /*#__PURE__*/_createElementVNode(\"strong\", null, \"Lexical Analysis\"),\n        /*#__PURE__*/_createTextVNode(\" (\"),\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"CommandLexer.lexCommand()\"),\n        /*#__PURE__*/_createTextVNode(\"): Converts the raw command string into a stream of tokens, recognising the basic lexical elements (words, text, slashes, colons).\")\n      ])\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"p\", null, [\n        /*#__PURE__*/_createElementVNode(\"strong\", null, \"Syntactic Analysis\"),\n        /*#__PURE__*/_createTextVNode(\" (\"),\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"CommandParser.parseCommand()\"),\n        /*#__PURE__*/_createTextVNode(\"): Transforms the token stream into an Abstract Syntax Tree that captures the hierarchical grammatical structure of the command.\")\n      ])\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"p\", null, [\n        /*#__PURE__*/_createElementVNode(\"strong\", null, \"Semantic Extraction\"),\n        /*#__PURE__*/_createTextVNode(\" (\"),\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"CommandExtractor.extract()\"),\n        /*#__PURE__*/_createTextVNode(\"): Traverses the AST using the visitor pattern to extract semantic information, populating a \"),\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"CommandBuilder\"),\n        /*#__PURE__*/_createTextVNode(\" with the command's meaningful components.\")\n      ])\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"This pipeline separates concerns cleanly: lexing handles character-level details, parsing handles grammar structure, and extraction handles meaning. The \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"BareCommand\"),\n    /*#__PURE__*/_createTextVNode(\" class receives only the final, distilled result.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Data Model\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The internal representation uses three data structures optimised for different access patterns:\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ul\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"imperative\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\" (\"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"String\"),\n      /*#__PURE__*/_createTextVNode(\"): A single command verb, accessed via \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"getImperative()\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"parameters\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\" (\"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"String[]\"),\n      /*#__PURE__*/_createTextVNode(\"): An ordered array for positional arguments, supporting indexed access via \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"getParameter(int)\"),\n      /*#__PURE__*/_createTextVNode(\" or bulk retrieval via \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"getAllParameters()\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"options\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\" (\"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"HashMap<String, String>\"),\n      /*#__PURE__*/_createTextVNode(\"): A key-value map for named options, enabling fast lookup via \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"getOptionValue(String)\"),\n      /*#__PURE__*/_createTextVNode(\" and existence checks via \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"hasOption(String)\")\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"This design reflects typical command usage patterns: imperatives are always present and unique, parameters are order-dependent, and options are queried by name.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Builder Pattern\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The nested \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"BareCommandBuilder\"),\n    /*#__PURE__*/_createTextVNode(\" class implements the \"),\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Builder pattern\"),\n    /*#__PURE__*/_createTextVNode(\" to construct \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Command\"),\n    /*#__PURE__*/_createTextVNode(\" instances incrementally. This is particularly useful for the \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"CommandExtractor\"),\n    /*#__PURE__*/_createTextVNode(\" visitor, which discovers command components as it traverses the AST:\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ul\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"setImperative(String)\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\": Sets the command verb (called once)\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"addParameter(String)\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\": Appends a positional parameter (called zero or more times, preserving order)\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"setOption(String)\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\" and \"),\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"setOption(String, String)\"),\n      /*#__PURE__*/_createTextVNode(\": Adds flag-style or value-bearing options (called zero or more times)\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"build()\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\": Produces the immutable \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"BareCommand\"),\n      /*#__PURE__*/_createTextVNode(\" instance\")\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The builder accumulates components in mutable collections (\"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"ArrayList\"),\n    /*#__PURE__*/_createTextVNode(\" for parameters, \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"HashMap\"),\n    /*#__PURE__*/_createTextVNode(\" for options), then converts them to the appropriate final representations during \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"build()\"),\n    /*#__PURE__*/_createTextVNode(\". This separation allows flexible construction while maintaining immutability in the final product.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"h4\", { id: \"usage-patterns\" }, [\n    /*#__PURE__*/_createTextVNode(\"Usage Patterns\"),\n    /*#__PURE__*/_createElementVNode(\"a\", {\n      class: \"fa fa-anchor\",\n      href: \"#usage-patterns\",\n      onclick: \"event.stopPropagation()\"\n    })\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Basic Parsing\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The primary interface is the static factory method:\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"pre\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs java\" }, [\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"BareCommand cmd = BareCommand.parse(\"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-string\" }, \"\\\"add John Doe /email:john@example.com /force\\\"\"),\n        /*#__PURE__*/_createTextVNode(\");\\n\")\n      ])\n    ])\n  ]),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"This single call handles all processing stages and returns a fully-populated \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"BareCommand\"),\n    /*#__PURE__*/_createTextVNode(\" object.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Querying BareCommands\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"Once parsed, commands support intuitive queries:\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"pre\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs java\" }, [\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"String verb = cmd.getImperative();           \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// \\\"add\\\"\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"String firstName = cmd.getParameter(\"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-number\" }, \"0\"),\n        /*#__PURE__*/_createTextVNode(\");      \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// \\\"John\\\"\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"String[] allParams = cmd.getAllParameters(); \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// [\\\"John\\\", \\\"Doe\\\"]\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"String email = cmd.getOptionValue(\"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-string\" }, \"\\\"email\\\"\"),\n        /*#__PURE__*/_createTextVNode(\");  \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// \\\"john@example.com\\\"\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"boolean\"),\n        /*#__PURE__*/_createTextVNode(\" forced = cmd.hasOption(\"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-string\" }, \"\\\"force\\\"\"),\n        /*#__PURE__*/_createTextVNode(\");     \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// true\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ])\n    ])\n  ]),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The API distinguishes between:\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ul\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"getOptionValue()\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\": Returns the value (or null for flags/missing options)\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"hasOption()\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\": Tests for option presence (useful for boolean flags)\")\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Error Handling\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"parse()\"),\n    /*#__PURE__*/_createTextVNode(\" method declares two checked exceptions corresponding to the two stages where errors can occur:\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ul\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"LexerException\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\": Thrown when the input contains invalid characters or malformed tokens (e.g., unterminated strings)\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createElementVNode(\"strong\", null, [\n        /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"ParserException\")\n      ]),\n      /*#__PURE__*/_createTextVNode(\": Thrown when the token sequence doesn't conform to the command grammar (e.g., missing imperatives, unexpected token order)\")\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"Users should handle both exceptions to provide appropriate error feedback:\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"pre\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs java\" }, [\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"try\"),\n        /*#__PURE__*/_createTextVNode(\" {\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"    BareCommand cmd = BareCommand.parse(userInput);\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"    \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// process command\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"} \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"catch\"),\n        /*#__PURE__*/_createTextVNode(\" (LexerException e) {\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"    \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// handle tokenization errors\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"} \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-keyword\" }, \"catch\"),\n        /*#__PURE__*/_createTextVNode(\" (ParserException e) {\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createTextVNode(\"    \"),\n        /*#__PURE__*/_createElementVNode(\"span\", { class: \"hljs-comment\" }, \"// handle grammar errors\"),\n        /*#__PURE__*/_createTextVNode(\"\\n\")\n      ]),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"}\\n\")\n    ])\n  ]),\n  /*#__PURE__*/_createElementVNode(\"h3\", { id: \"command-grammar\" }, [\n    /*#__PURE__*/_createTextVNode(\"Command Grammar\"),\n    /*#__PURE__*/_createElementVNode(\"a\", {\n      class: \"fa fa-anchor\",\n      href: \"#command-grammar\",\n      onclick: \"event.stopPropagation()\"\n    })\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Lexer Tokens\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The following regular grammar is recognised by the lexer.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"pre\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs\" }, [\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"WORD   ::= [A-z0-9]+\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"TEXT   ::= \\\"[^\\\"/:]*\\\"\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"SLASH  ::= /\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"COLON  ::= :\\n\")\n    ])\n  ]),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"TERMINAL\"),\n    /*#__PURE__*/_createTextVNode(\" token denotes the end of input.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Command Grammar\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The following command grammar is recognised by the parser, in EBNF notation.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"pre\", null, [\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs\" }, [\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"command          → imperative parameter_list option_list TERMINAL\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"imperative       → word\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"parameter_list   → ( parameter )+\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"parameter        → text\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"option_list      → ( option )+\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"option           → SLASH option_name ( COLON option_value )*\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"option_name      → word\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"option_value     → text\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"text             → TEXT | WORD\\n\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, \"word             → WORD\\n\")\n    ])\n  ]),\n  /*#__PURE__*/_createElementVNode(\"h3\", { id: \"resolution-architecture\" }, [\n    /*#__PURE__*/_createTextVNode(\"Resolution Architecture\"),\n    /*#__PURE__*/_createElementVNode(\"a\", {\n      class: \"fa fa-anchor\",\n      href: \"#resolution-architecture\",\n      onclick: \"event.stopPropagation()\"\n    })\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The resolution step involves identifying the right command to run. This step uses the imperative parsed previously and matches the imperative to exactly one \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"CommandExtractor\"),\n    /*#__PURE__*/_createTextVNode(\" (explained later, in validation), which builds the final \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Command\"),\n    /*#__PURE__*/_createTextVNode(\" eventually.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"h4\", { id: \"core-components\" }, [\n    /*#__PURE__*/_createTextVNode(\"Core Components\"),\n    /*#__PURE__*/_createElementVNode(\"a\", {\n      class: \"fa fa-anchor\",\n      href: \"#core-components\",\n      onclick: \"event.stopPropagation()\"\n    })\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, [\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Decoder\")\n    ]),\n    /*#__PURE__*/_createTextVNode(\": The entry point that orchestrates command resolution. Given a \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"BareCommand\"),\n    /*#__PURE__*/_createTextVNode(\", it:\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ol\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, \"Extracts the imperative (command verb)\"),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"Queries \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Bindings\"),\n      /*#__PURE__*/_createTextVNode(\" to find the matching \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"CommandExtractor\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"Delegates to that extractor to build the final \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Command\")\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, [\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Bindings\")\n    ]),\n    /*#__PURE__*/_createTextVNode(\": An enumeration serving as the \"),\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"command registry\"),\n    /*#__PURE__*/_createTextVNode(\". Each enum constant associates:\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ul\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"An \"),\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"imperative string\"),\n      /*#__PURE__*/_createTextVNode(\" (e.g., \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"\\\"tag\\\"\"),\n      /*#__PURE__*/_createTextVNode(\")\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"A \"),\n      /*#__PURE__*/_createElementVNode(\"strong\", null, \"CommandExtractor\"),\n      /*#__PURE__*/_createTextVNode(\" (method reference like \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"TagCommandExtractor::extract\"),\n      /*#__PURE__*/_createTextVNode(\")\")\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"This enum acts as the single source of truth for all available commands. Adding a new command requires adding one line to this enum.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, [\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"BareCommand\"),\n      /*#__PURE__*/_createTextVNode(\" to \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Command\"),\n      /*#__PURE__*/_createTextVNode(\" Transformation\")\n    ])\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The system transforms generic \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"BareCommand\"),\n    /*#__PURE__*/_createTextVNode(\" objects (containing raw imperative, parameters, and options) into specific, type-safe \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Command\"),\n    /*#__PURE__*/_createTextVNode(\" instances ready for execution. This separation allows the parser to remain generic while enabling domain-specific validation and construction logic for each command type.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Exact Matching Strategy\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Decoder.decode()\"),\n    /*#__PURE__*/_createTextVNode(\" method uses \"),\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"exact matching\"),\n    /*#__PURE__*/_createTextVNode(\" via \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Bindings.resolveExactBinding()\"),\n    /*#__PURE__*/_createTextVNode(\":\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ol\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, \"A predicate tests each binding's imperative for equality with the input\"),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"If no matches found: throws \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"ResolutionException\"),\n      /*#__PURE__*/_createTextVNode(\" (\\\"Unable to find a valid matching command\\\")\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"If multiple matches found: throws \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"ResolutionException\"),\n      /*#__PURE__*/_createTextVNode(\" (\\\"Resolved command is ambiguous\\\")\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, \"If exactly one match: returns that binding's extractor\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"This strict resolution ensures deterministic command dispatch and catches configuration errors (duplicate imperatives) for now.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, \"Flexible Resolution Support\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"The above also allows us to accommodate more flexible resolution for commands in the future.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, \"For exact binding resolution, we can support more flexible matching strategies (prefix matching, aliases) in the future by simply modifying the predicate passed in by the decoder.\"),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Bindings.resolveBindings()\"),\n    /*#__PURE__*/_createTextVNode(\" method supports even more flexible matching strategies (fuzzy search) by returning all matching extractors. While not currently used by \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Decoder\"),\n    /*#__PURE__*/_createTextVNode(\", this enables future features like command suggestions.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"h3\", { id: \"validation-architecture\" }, [\n    /*#__PURE__*/_createTextVNode(\"Validation Architecture\"),\n    /*#__PURE__*/_createElementVNode(\"a\", {\n      class: \"fa fa-anchor\",\n      href: \"#validation-architecture\",\n      onclick: \"event.stopPropagation()\"\n    })\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createTextVNode(\"The validation step involves assembling the final command by parsing all necessary parameters and options and constructing the final \"),\n    /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Command\"),\n    /*#__PURE__*/_createTextVNode(\" executor object.\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"h4\", { id: \"core-components-2\" }, [\n    /*#__PURE__*/_createTextVNode(\"Core Components\"),\n    /*#__PURE__*/_createElementVNode(\"a\", {\n      class: \"fa fa-anchor\",\n      href: \"#core-components-2\",\n      onclick: \"event.stopPropagation()\"\n    })\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"p\", null, [\n    /*#__PURE__*/_createElementVNode(\"strong\", null, [\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"CommandExtractor<T>\")\n    ]),\n    /*#__PURE__*/_createTextVNode(\": A functional interface defining the contract for command-specific extraction logic. Each extractor:\")\n  ]),\n  /*#__PURE__*/_createTextVNode(),\n  /*#__PURE__*/_createElementVNode(\"ul\", null, [\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"Accepts a \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"BareCommand\"),\n      /*#__PURE__*/_createTextVNode(\" (generic parsed representation)\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"Validates parameters and options and transforms them into valid constructor inputs for their respective \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Command\"),\n      /*#__PURE__*/_createTextVNode(\" constructors according to command-specific rules\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"Constructs and returns a typed \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"Command\"),\n      /*#__PURE__*/_createTextVNode(\" instance (e.g., \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"TagCommand\"),\n      /*#__PURE__*/_createTextVNode(\")\")\n    ]),\n    /*#__PURE__*/_createTextVNode(),\n    /*#__PURE__*/_createElementVNode(\"li\", null, [\n      /*#__PURE__*/_createTextVNode(\"Throws \"),\n      /*#__PURE__*/_createElementVNode(\"code\", { class: \"hljs inline no-lang\" }, \"ValidationException\"),\n      /*#__PURE__*/_createTextVNode(\" for invalid inputs\")\n    ])\n  ])\n], -1 /* HOISTED */)\nconst _hoisted_17 = /*#__PURE__*/_createElementVNode(\"div\", { class: \"nav-component slim-scroll\" }, null, -1 /* HOISTED */)\nconst _hoisted_18 = /*#__PURE__*/_createElementVNode(\"footer\", null, [\n  /*#__PURE__*/_createElementVNode(\"div\", { class: \"text-center\" }, [\n    /*#__PURE__*/_createElementVNode(\"small\", null, [\n      /*#__PURE__*/_createTextVNode(\"[\"),\n      /*#__PURE__*/_createElementVNode(\"span\", null, [\n        /*#__PURE__*/_createElementVNode(\"strong\", null, \"Powered by\")\n      ]),\n      /*#__PURE__*/_createTextVNode(),\n      /*#__PURE__*/_createElementVNode(\"img\", {\n        src: \"https://markbind.org/favicon.ico\",\n        width: \"30\"\n      }),\n      /*#__PURE__*/_createTextVNode(),\n      /*#__PURE__*/_createElementVNode(\"a\", { href: \"https://markbind.org/\" }, \"MarkBind 6.0.2\"),\n      /*#__PURE__*/_createTextVNode(\", generated on Wed, 29 Oct 2025, 23:25:01 GMT+8]\")\n    ])\n  ])\n], -1 /* HOISTED */)\n\nreturn function render(_ctx, _cache) {\n  const _component_searchbar = _resolveComponent(\"searchbar\")\n  const _component_navbar = _resolveComponent(\"navbar\")\n  const _component_overlay_source = _resolveComponent(\"overlay-source\")\n  const _component_site_nav = _resolveComponent(\"site-nav\")\n  const _component_scroll_top_button = _resolveComponent(\"scroll-top-button\")\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createElementVNode(\"header\", _hoisted_1, [\n      _createVNode(_component_navbar, { type: \"dark\" }, {\n        brand: _withCtx(() => [\n          _hoisted_2\n        ]),\n        right: _withCtx(() => [\n          _createElementVNode(\"li\", null, [\n            _createElementVNode(\"form\", _hoisted_8, [\n              _createVNode(_component_searchbar, {\n                data: _ctx.searchData,\n                placeholder: \"Search\",\n                \"on-hit\": _ctx.searchCallback,\n                \"menu-align-right\": \"\"\n              }, null, 8 /* PROPS */, [\"data\", \"on-hit\"])\n            ])\n          ])\n        ]),\n        default: _withCtx(() => [\n          _createTextVNode(),\n          _hoisted_3,\n          _createTextVNode(),\n          _hoisted_4,\n          _createTextVNode(),\n          _hoisted_5,\n          _createTextVNode(),\n          _hoisted_6,\n          _createTextVNode(),\n          _hoisted_7,\n          _createTextVNode()\n        ]),\n        _: 1 /* STABLE */\n      })\n    ]),\n    _createTextVNode(),\n    _createElementVNode(\"div\", _hoisted_9, [\n      _createVNode(_component_overlay_source, {\n        id: \"site-nav\",\n        \"tag-name\": \"nav\",\n        to: \"site-nav\"\n      }, {\n        default: _withCtx(() => [\n          _hoisted_10,\n          _createTextVNode(),\n          _createElementVNode(\"div\", _hoisted_11, [\n            _createVNode(_component_site_nav, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_overlay_source, {\n                  class: \"site-nav-list site-nav-list-root\",\n                  \"tag-name\": \"ul\",\n                  to: \"mb-site-nav\"\n                }, {\n                  default: _withCtx(() => [\n                    _hoisted_12,\n                    _createTextVNode(),\n                    _hoisted_13,\n                    _createTextVNode(),\n                    _hoisted_14,\n                    _createTextVNode(),\n                    _hoisted_15\n                  ]),\n                  _: 1 /* STABLE */\n                })\n              ]),\n              _: 1 /* STABLE */\n            })\n          ])\n        ]),\n        _: 1 /* STABLE */\n      }),\n      _createTextVNode(),\n      _hoisted_16,\n      _createTextVNode(),\n      _createVNode(_component_overlay_source, {\n        id: \"page-nav\",\n        \"tag-name\": \"nav\",\n        to: \"page-nav\"\n      }, {\n        default: _withCtx(() => [\n          _hoisted_17\n        ]),\n        _: 1 /* STABLE */\n      }),\n      _createTextVNode(),\n      _createVNode(_component_scroll_top_button)\n    ]),\n    _createTextVNode(),\n    _hoisted_18\n  ], 64 /* STABLE_FRAGMENT */))\n}");
    var render = renderFn();
  