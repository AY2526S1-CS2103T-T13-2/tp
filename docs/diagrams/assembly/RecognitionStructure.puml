@startuml
!define ABSTRACT_CLASS abstract class
!define INTERFACE interface
!define ABSTRACT_METHOD {abstract}

package "Lexer" {
    class CommandLexer {
        __
        + {static} lexCommand(String): TokenisedCommand
    }

    class TokenisedCommand {
    }

    class Token {
    }

    enum TokenType {
        WORD
        TEXT
        SLASH
        COLON
        PLUS
        MINUS
        TERMINAL
    }
}

package "Parser" {
    class CommandParser {
        __
        + {static} parseCommand(TokenisedCommand): AstNode.Command
    }

    package "AST" {
        ABSTRACT_CLASS AstNode {
            + accept(AstVisitor): R
        }

        note "various AstNodes are implemented here, extending `AstNode`" as N1

        package "Visitor" {
            INTERFACE "AstVisitor<R>" as AstVisitor {
                + visitCommand(Command): R
                + visitImperative(Imperative): R
                + visitParameterList(ParameterList): R
                + visitParameter(Parameter): R
                + visitNormalParameter(NormalParameter): R
                + visitAdditiveParameter(AdditiveParameter): R
                + visitSubtractiveParameter(SubtractiveParameter): R
                + visitOptionList(OptionList): R
                + visitOption(Option): R
                + visitOptionName(OptionName): R
                + visitOptionValue(OptionValue): R
                + visitText(Text): R
                + visitWord(Word): R
            }

            class CommandExtractor {
                + extract(Command): Command
            }
        }
    }
}

class BareCommand {
    __
    + {static} parse(String): BareCommand
}

class BareCommandBuilder {
    __
    + BareCommandBuilder()
    + setImperative(String): void
    + addParameter(String): void
    + setOption(String): void
    + setOption(String, String): void
    + build(): BareCommand
}

' Relationships - Lexer
CommandLexer ..> TokenisedCommand : creates
TokenisedCommand *-> "*" Token
Token --> "type" TokenType

' Relationships - Parser
CommandParser --> TokenisedCommand : uses

' Relationships - Visitor
CommandExtractor ..|> AstVisitor
AstNode ..> AstVisitor : accepts
CommandExtractor ..> BareCommandBuilder : uses

' Relationships - Interface
BareCommand +-- BareCommandBuilder
BareCommand ..> CommandLexer : uses
BareCommand ..> CommandParser : uses
BareCommand ..> CommandExtractor : uses
BareCommandBuilder ..> BareCommand : builds

hide empty members

@enduml
